1-Second Largest
class Solution {
  public:
    // Function returns the second
    // largest elements
    int getSecondLargest(vector<int> &arr) {
        // Code Hereif (arr.size() < 2) return -1; // Not enough elements

    int largest = -1, secondLargest = -1;

    for (int num : arr) {
        if (num > largest) { 
            // Found a new largest element
            secondLargest = largest;
            largest = num;
        } else if (num < largest && num > secondLargest) { 
            // Update second largest if it's smaller than largest and larger than current secondLargest
            secondLargest = num;
        }
    }

    return secondLargest;
    }
};

2-Move All Zeroes to End
 void pushZerosToEnd(vector<int>& arr) {
        // code here
         int n = arr.size();
    int nonZeroIndex = 0; // Pointer for the position of the next non-zero element

    for (int i = 0; i < n; i++) {
        if (arr[i] != 0) {
            swap(arr[nonZeroIndex], arr[i]);
            nonZeroIndex++;
        }
    }
    }

    3-Reverse an Array

4-Rotate Array
oid reverse(vector<int>& arr, int start, int end) {
    while (start < end) {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}
    // Function to rotate an array by d elements in counter-clockwise direction.
    void rotateArr(vector<int>& arr, int d) {
        // code here
          int n = arr.size();
    d = d % n; // Handle cases where d >= n

    // Step 1: Reverse the first d elements
    reverse(arr, 0, d - 1);

    // Step 2: Reverse the remaining elements
    reverse(arr, d, n - 1);

    // Step 3: Reverse the entire array
    reverse(arr, 0, n - 1);
    }
};

5-next permutation

class Solution {
  public:
    void nextPermutation(vector<int>& arr) {
        // code here
         int n = arr.size(), i, j;

    // Step 1: Find the first decreasing element
    for (i = n - 2; i >= 0; i--) {
        if (arr[i] < arr[i + 1]) {
            break;
        }
    }

    // If no such element is found, reverse the array
    if (i < 0) {
        reverse(arr.begin(), arr.end());
    } else {
        // Step 2: Find the element just larger than arr[i]
        for (j = n - 1; j > i; j--) {
            if (arr[j] > arr[i]) {
                break;
            }
        }

        // Step 3: Swap arr[i] and arr[j]
        swap(arr[i], arr[j]);

        // Step 4: Reverse the suffix starting at i + 1
        reverse(arr.begin() + i + 1, arr.end());
    }
    }
};
